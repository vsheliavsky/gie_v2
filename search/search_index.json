{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":""},{"location":"AsyncGieClient/","title":"AsyncGieClient","text":""},{"location":"BaseClient/","title":"BaseGieClient","text":""},{"location":"BaseClient/#clients.base_gie_client.BaseGieClient","title":"<code>BaseGieClient</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for interacting with the GIE (Gas Infrastructure Europe) API.</p> <p>This class provides the foundational structure for GIE clients, handling API keys, session management, and providing abstract methods that must be implemented by subclasses to query various endpoints of the API, such as storage data, unavailability data, EIC listings, and news items.</p> <p>Attributes:</p> Name Type Description <code>api_key</code> <code>str</code> <p>The API key used to authenticate with the GIE API.</p> <code>session</code> <code>Session | ClientSession</code> <p>The HTTP session used for making synchronous or asynchronous API requests.</p> <p>Methods:</p> Name Description <code>fetch</code> <p>Abstract method to fetch data from a specified endpoint with various filters.</p> <code>query_storage</code> <p>Abstract method to query storage data with filters for date, type, country, and facility.</p> <code>query_unavailability</code> <p>Abstract method to query unavailability data with filters for planned/unplanned outages.</p> <code>query_eic_listing</code> <p>Abstract method to query the EIC listing, optionally fetching the complete list.</p> <code>query_news_listing</code> <p>Abstract method to query news listings or a specific news item.</p> <code>close_session</code> <p>Abstract method to close the HTTP session.</p>"},{"location":"BaseClient/#clients.base_gie_client.BaseGieClient.fetch","title":"<code>fetch(api_type, params, endpoint)</code>  <code>abstractmethod</code>","text":"<p>Helper function to fetch data from different endpoints of the API based on the provided filters and parameters.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API to interact with. Determines the root URL based on the <code>APIType</code> enum value.</p> required <code>params</code> <code>dict[str, Any] | None</code> <p>A dictionary of query parameters to include in the request. Only parameters with non-None values are sent. Defaults to None, in which case no parameters are included.</p> required <code>endpoint</code> <code>str | None</code> <p>The specific API endpoint to append to the root URL. If None, the root URL is used.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing the fetched data from the API.</p>"},{"location":"BaseClient/#clients.base_gie_client.BaseGieClient.query_eic_listing","title":"<code>query_eic_listing(api_type, show_listing=False)</code>  <code>abstractmethod</code>","text":"<p>Query the EIC (Energy Identification Code) listing based on the provided API type.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API from which to query the EIC listing.</p> required <code>show_listing</code> <code>bool</code> <p>Whether to retrieve the complete EIC listing. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The queried EIC listing data, the structure of which depends on the API being queried.</p>"},{"location":"BaseClient/#clients.base_gie_client.BaseGieClient.query_news_listing","title":"<code>query_news_listing(api_type, news_url)</code>  <code>abstractmethod</code>","text":"<p>Query the news listing or a specific news item based on the provided API type and URL.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API from which to query the news listing.</p> required <code>news_url</code> <code>str | None</code> <p>The URL of a specific news item to retrieve. If None, the method will return a listing of news items.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing the news data. If <code>news_url</code> is provided, returns the specific news item. Otherwise, returns a list of news items.</p>"},{"location":"BaseClient/#clients.base_gie_client.BaseGieClient.query_storage","title":"<code>query_storage(api_type, page=1, reverse=None, size=30, from_date=None, to_date=None, date=None, updated=None, type=None, country=None, company=None, facility=None)</code>  <code>abstractmethod</code>","text":"<p>Query storage data based on the provided filters and parameters.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API from which data is being queried.</p> required <code>page</code> <code>int | str | None</code> <p>The page number or identifier for paginated results.</p> <code>1</code> <code>reverse</code> <code>str | bool | None</code> <p>Whether to reverse the order of the results. Can be a boolean or string representation of a boolean.</p> <code>None</code> <code>size</code> <code>int | None</code> <p>The number of items per page or batch to retrieve.</p> <code>30</code> <code>from_date</code> <code>datetime | str | None</code> <p>The starting date for filtering results, in datetime or string format.</p> <code>None</code> <code>to_date</code> <code>datetime | str | None</code> <p>The ending date for filtering results, in datetime or string format.</p> <code>None</code> <code>date</code> <code>datetime | str | None</code> <p>A specific date to query data for, in datetime or string format.</p> <code>None</code> <code>updated</code> <code>datetime | str | None</code> <p>The last updated date to filter results by.</p> <code>None</code> <code>type</code> <code>Literal['EU', 'NE', 'AI'] | None</code> <p>The type of data to filter by, with options being \"EU\", \"NE\", or \"AI\".</p> <code>None</code> <code>country</code> <code>str | None</code> <p>The country to filter the results by.</p> <code>None</code> <code>company</code> <code>str | None</code> <p>The company name to filter the results by. Note that a <code>country</code> parameter must be passed to use this.</p> <code>None</code> <code>facility</code> <code>str | None</code> <p>The facility to filter the results by. Note that both <code>country</code> and <code>company</code> parameters must be passed to use this.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing the fetched data from the API.</p>"},{"location":"BaseClient/#clients.base_gie_client.BaseGieClient.query_unavailability","title":"<code>query_unavailability(api_type, page=1, reverse=None, size=30, from_date=None, to_date=None, start=None, end=None, updated=None, type=None, end_flag=None, country=None, company=None, facility=None)</code>  <code>abstractmethod</code>","text":"<p>Query the unavailability data based on the provided filters and parameters.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API from which data is being queried.</p> required <code>page</code> <code>int | str | None</code> <p>The page number or identifier for paginated results.</p> <code>1</code> <code>reverse</code> <code>str | bool | None</code> <p>Whether to reverse the order of the results. Can be a boolean or string representation of a boolean.</p> <code>None</code> <code>size</code> <code>int | None</code> <p>The number of items per page or batch to retrieve.</p> <code>30</code> <code>from_date</code> <code>datetime | str | None</code> <p>The starting date for filtering results, in datetime or string format.</p> <code>None</code> <code>to_date</code> <code>datetime | str | None</code> <p>The ending date for filtering results, in datetime or string format.</p> <code>None</code> <code>start</code> <code>datetime | str | None</code> <p>The start date or time for the unavailability period being queried.</p> <code>None</code> <code>end</code> <code>datetime | str | None</code> <p>The end date or time for the unavailability period being queried.</p> <code>None</code> <code>type</code> <code>Literal['Planned', 'Unplanned']</code> <p>The type of unavailability, either \"Planned\" or \"Unplanned\".</p> <code>None</code> <code>end_flag</code> <code>Literal['confirmed', 'estimate']</code> <p>The flag indicating if the unavailability end is confirmed or an estimate.</p> <code>None</code> <code>country</code> <code>str | None</code> <p>The country to filter the results by.</p> <code>None</code> <code>company</code> <code>str | None</code> <p>The company name to filter the results by.</p> <code>None</code> <code>facility</code> <code>str | None</code> <p>The facility to filter the results by.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing the queried unavailability data.</p>"},{"location":"GieClient/","title":"GieClient","text":""},{"location":"GieClient/#clients.gie_client.GieClient","title":"<code>GieClient</code>","text":"<p>               Bases: <code>BaseGieClient</code></p>"},{"location":"GieClient/#clients.gie_client.GieClient.__init__","title":"<code>__init__(api_key, session=None)</code>","text":"<p>Client class for interacting with the GIE API.</p> <p>This class handles API requests and manages the API session. It requires an API key for authentication. If a custom <code>requests.Session</code> is not provided, a new session is created with the API key set in the headers.</p> <p>Attributes:</p> Name Type Description <code>api_key</code> <code>str</code> <p>The API key used for authentication with the GIE API.</p> <code>session</code> <code>Session</code> <p>The <code>requests.Session</code> object used for making HTTP requests. If not provided, a new session is created with the API key set in the headers.</p> <p>Functions:</p> Name Description <code>fetch</code> <p>Method to fetch data from a specified endpoint with various filters.</p> <code>query_storage</code> <p>Method to query storage data with filters for date, type, country, and facility.</p> <code>query_unavailability</code> <p>Method to query unavailability data with filters for planned/unplanned outages.</p> <code>query_eic_listing</code> <p>Method to query the EIC listing, optionally fetching the complete list.</p> <code>query_news_listing</code> <p>Method to query news listings or a specific news item.</p> Example"},{"location":"GieClient/#clients.gie_client.GieClient.__init__--create-a-gieclient-instance-with-a-custom-session","title":"Create a GieClient instance with a custom session","text":"<pre><code>session = requests.Session()  \nsession.headers[\"x-key\"] = \"your_api_key\"  \nclient = GieClient(api_key=\"your_api_key\", session=session)\n</code></pre>"},{"location":"GieClient/#clients.gie_client.GieClient.__init__--create-a-gieclient-instance-with-a-new-session","title":"Create a GieClient instance with a new session","text":"<pre><code>client = GieClient(api_key=\"your_api_key\")\n</code></pre>"},{"location":"GieClient/#clients.gie_client.GieClient.fetch","title":"<code>fetch(api_type, params=None, endpoint=None)</code>","text":"<p>Sends a GET request to a specified API endpoint with the provided parameters and returns the JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API to interact with. Determines the root URL based on the <code>APIType</code> enum value.</p> required <code>params</code> <code>dict[str, Any] | None</code> <p>A dictionary of query parameters to include in the request. Only parameters with non-None values are sent. Defaults to None, in which case no parameters are included.</p> <code>None</code> <code>endpoint</code> <code>str | None</code> <p>The specific API endpoint to append to the root URL. If None, the root URL is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The JSON response from the API.</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If the request fails due to network or other issues.</p> Example"},{"location":"GieClient/#clients.gie_client.GieClient.fetch--sends-a-get-request-to-the-constructed-url-and-returns-the-json-response","title":"Sends a GET request to the constructed URL and returns the JSON response.","text":"<p><code>response = fetch(api_type=APIType.AGSI, params={\"country\": \"DE\"})</code></p>"},{"location":"GieClient/#clients.gie_client.GieClient.query_eic_listing","title":"<code>query_eic_listing(api_type, show_listing=False)</code>","text":"<p>Queries the EIC listing or general API information and returns the JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API being queried, determining the base URL.</p> required <code>show_listing</code> <code>bool</code> <p>If True, queries the EIC listing. If False, retrieves general information. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The JSON response from the API.</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If the API request fails due to network issues or other errors.</p> Example"},{"location":"GieClient/#clients.gie_client.GieClient.query_eic_listing--query-the-eic-listing","title":"Query the EIC listing","text":"<pre><code>response = query_eic_listing(api_type=APIType.AGSI, show_listing=True)\n</code></pre>"},{"location":"GieClient/#clients.gie_client.GieClient.query_eic_listing--query-general-api-information","title":"Query general API information","text":"<pre><code>response = query_eic_listing(api_type=APIType.AGSI, show_listing=False)\n</code></pre>"},{"location":"GieClient/#clients.gie_client.GieClient.query_news_listing","title":"<code>query_news_listing(api_type, news_url=None)</code>","text":"<p>Queries the news listing or specific news based on the provided URL and returns the JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API being queried, determining the base URL.</p> required <code>news_url</code> <code>str | None</code> <p>The URL of the specific news item to query. If None, retrieves the general news listing. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The JSON response from the news API.</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If the API request fails due to network issues or other errors.</p> Example"},{"location":"GieClient/#clients.gie_client.GieClient.query_news_listing--query-the-general-news-listing","title":"Query the general news listing","text":"<pre><code>response = query_news_listing(api_type=APIType.AGSI)\n</code></pre>"},{"location":"GieClient/#clients.gie_client.GieClient.query_news_listing--query-a-specific-news-item-by-url","title":"Query a specific news item by URL","text":"<pre><code>response = query_news_listing(api_type=APIType.AGSI, news_url=\"371616\")\n</code></pre>"},{"location":"GieClient/#clients.gie_client.GieClient.query_storage","title":"<code>query_storage(api_type, page=1, reverse=None, size=30, from_date=None, to_date=None, date=None, updated=None, type=None, country=None, company=None, facility=None)</code>","text":"<p>Queries the storage API endpoint with the specified parameters and returns the JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API being queried, which defines the base URL.</p> required <code>page</code> <code>int</code> <p>The page number for pagination. Defaults to 1.</p> <code>1</code> <code>reverse</code> <code>Literal['true', 'false', 0, 1] | None</code> <p>Determines if the results should be reversed. Accepts \"true\", \"false\", 0, or 1. Defaults to None.</p> <code>None</code> <code>size</code> <code>int | None</code> <p>The number of results per page. Defaults to 30. Must be between 1 and 300.</p> <code>30</code> <code>from_date</code> <code>date | None</code> <p>The start date for the query filter. Defaults to None.</p> <code>None</code> <code>to_date</code> <code>date | None</code> <p>The end date for the query filter. Defaults to None.</p> <code>None</code> <code>date</code> <code>date | None</code> <p>A specific date for querying data. Defaults to None.</p> <code>None</code> <code>updated</code> <code>date | None</code> <p>A filter for querying data updated on this date. Defaults to None.</p> <code>None</code> <code>type</code> <code>Literal['EU', 'NE', 'AI'] | None</code> <p>The type of storage data to query. Defaults to None.</p> <code>None</code> <code>country</code> <code>str | None</code> <p>The country code to filter the results. Defaults to None.</p> <code>None</code> <code>company</code> <code>str | None</code> <p>The company name to filter the results. Defaults to None.</p> <code>None</code> <code>facility</code> <code>str | None</code> <p>The facility name to filter the results. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The JSON response from the API containing the storage data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the provided parameters are invalid according to the validation rules.</p> <code>RequestException</code> <p>If the request fails due to network issues or other errors.</p> Example"},{"location":"GieClient/#clients.gie_client.GieClient.query_storage--returns-the-json-response-from-the-api-with-the-specified-filters","title":"Returns the JSON response from the API with the specified filters.","text":"<pre><code>response = query_storage(\n    api_type=APIType.AGSI,\n    page=1,\n    size=50,\n    from_date=datetime.date(2023, 1, 1),\n    to_date=datetime.date(2023, 12, 31),\n    country=\"DE\",\n    company=\"ABC Corp\"\n)\n</code></pre>"},{"location":"GieClient/#clients.gie_client.GieClient.query_unavailability","title":"<code>query_unavailability(api_type, page=1, reverse=None, size=30, from_date=None, to_date=None, start=None, end=None, updated=None, type=None, end_flag=None, country=None, company=None, facility=None)</code>","text":"<p>Queries the unavailability API endpoint with the specified parameters and returns the JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API being queried, determining the base URL.</p> required <code>page</code> <code>int</code> <p>The page number for pagination. Defaults to 1.</p> <code>1</code> <code>reverse</code> <code>Literal['true', 'false', 0, 1] | None</code> <p>Specifies whether to reverse the results. Accepts \"true\", \"false\", 0, or 1. Defaults to None.</p> <code>None</code> <code>size</code> <code>int | None</code> <p>Number of results per page. Must be between 1 and 300. Defaults to 30.</p> <code>30</code> <code>from_date</code> <code>date | None</code> <p>The start date for filtering results. Defaults to None.</p> <code>None</code> <code>to_date</code> <code>date | None</code> <p>The end date for filtering results. Defaults to None.</p> <code>None</code> <code>start</code> <code>date | None</code> <p>The start date of the unavailability period. Defaults to None.</p> <code>None</code> <code>end</code> <code>date | None</code> <p>The end date of the unavailability period. Defaults to None.</p> <code>None</code> <code>updated</code> <code>date | None</code> <p>Filter for data updated on this date. Defaults to None.</p> <code>None</code> <code>type</code> <code>Literal['Planned', 'Unplanned'] | None</code> <p>The type of unavailability to query. Defaults to None.</p> <code>None</code> <code>end_flag</code> <code>Literal['Confirmed', 'Estimate'] | None</code> <p>Specifies whether to filter by confirmed or estimated end dates. Defaults to None.</p> <code>None</code> <code>country</code> <code>str | None</code> <p>Country code to filter results. Defaults to None.</p> <code>None</code> <code>company</code> <code>str | None</code> <p>Company name to filter results. Defaults to None.</p> <code>None</code> <code>facility</code> <code>str | None</code> <p>Facility name to filter results. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The JSON response from the unavailability API.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the provided parameters fail validation.</p> <code>RequestException</code> <p>If the API request fails due to network issues or other errors.</p> Example"},{"location":"GieClient/#clients.gie_client.GieClient.query_unavailability--queries-the-unavailability-api-endpoint-and-returns-the-response-as-json","title":"Queries the unavailability API endpoint and returns the response as JSON.","text":"<pre><code>response = query_unavailability(\n    api_type=APIType.AGSI,\n    page=1,\n    size=50,\n    from_date=datetime.date(2023, 1, 1),\n    to_date=datetime.date(2023, 12, 31),\n    country=\"DE\",\n    type=\"Planned\"\n)\n</code></pre>"},{"location":"Helpers/","title":"Helper Functions","text":""},{"location":"Helpers/#utils.helpers.validate_dates","title":"<code>validate_dates(beginning=None, end=None)</code>","text":"<p>Validates that the beginning date is not after the end date.</p> <p>Parameters:</p> Name Type Description Default <code>beginning</code> <code>date | None</code> <p>The starting date. If None, no validation is performed.</p> <code>None</code> <code>end</code> <code>date | None</code> <p>The ending date. If None, no validation is performed.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both <code>beginning</code> and <code>end</code> are provided and <code>beginning</code> is after <code>end</code>.</p> Example <p>validate_dates(datetime.date(2023, 1, 1), datetime.date(2022, 12, 31))</p>"},{"location":"Helpers/#utils.helpers.validate_dates--raises-valueerror-starting-date-is-after-end-date","title":"Raises ValueError: Starting date is after end date!","text":""},{"location":"Helpers/#utils.helpers.validate_input_params","title":"<code>validate_input_params(api_type, params, request_type)</code>","text":"<p>Validates various input parameters for an API request, ensuring that they follow the required format and logical constraints.</p> <p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>APIType</code> <p>The type of API being accessed. Must be an instance of the <code>APIType</code> enum.</p> required <code>params</code> <code>ParamDict</code> <p>Dictionary containing the request parameters. Expected keys include: - \"country\" (str | None) - \"company\" (str | None) - \"facility\" (str | None) - \"from_date\" (datetime.date | None) - \"to_date\" (datetime.date | None) - \"start\" (datetime.date | None) - \"end\" (datetime.date | None) - \"page\" (int) - \"size\" (int) - \"reverse\" (Union[str, int, None]) - \"type\" (str | None)</p> required <code>request_type</code> <code>Literal['storage', 'unavailability']</code> <p>Specifies the type of request, which impacts validation rules for the <code>type</code> parameter.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the following conditions are violated: - <code>api_type</code> is not an instance of <code>APIType</code>. - <code>country</code> is not provided when <code>company</code> or <code>facility</code> is given. - <code>facility</code> is provided but <code>company</code> is missing. - The date range in <code>from_date</code> and <code>to_date</code> or <code>start</code> and <code>end</code> is invalid. - <code>page</code> is less than or equal to 0. - <code>size</code> is not between 1 and 300. - <code>reverse</code> is not one of [\"true\", \"false\", 0, 1]. - <code>type</code> is not one of the allowed values depending on the <code>request_type</code>.</p> Example"},{"location":"Helpers/#utils.helpers.validate_input_params--validates-the-input-without-raising-an-exception","title":"Validates the input without raising an exception.","text":"<p>validate_input_params(     api_type=APIType.STORAGE,     params={         \"country\": \"US\",         \"company\": \"ABC Corp\",         \"facility\": None,         \"from_date\": datetime.date(2023, 1, 1),         \"to_date\": datetime.date(2023, 12, 31),         \"page\": 1,         \"size\": 100,         \"reverse\": \"true\",         \"type\": \"EU\"     },     request_type=\"storage\" )</p>"},{"location":"Helpers/#utils.helpers.validate_input_params--raises-valueerror-page-param-must-be-more-than-0","title":"Raises ValueError: <code>page</code> param must be more than 0.","text":"<p>validate_input_params(     api_type=APIType.STORAGE,     params={\"company\": \"ABC Corp\", \"facility\": None, \"page\": 0},     request_type=\"storage\" )</p>"},{"location":"Quickstart/","title":"Quickstart Guide","text":"<p>This guide provides a quick start for using the <code>GieClient</code> class to interact with the GIE API, enabling you to perform various queries such as retrieving storage data, unavailability information, EIC listings, and news updates.</p>"},{"location":"Quickstart/#installation","title":"Installation","text":"<p><code>pip install roiti-gie-v2</code></p>"},{"location":"Quickstart/#basic-usage","title":"Basic Usage","text":"<p>The GieClient class requires an API key to authenticate with the GIE API. You can get one by registering here: https://alsi.gie.eu/#/api and creating a key that's valid for both AGSI and ALSI.</p> <pre><code>from XXXXX.clients import gie_client\n</code></pre> <p>Create a client instance: <code>client = GieClient(api_key=\"your_api_key\")</code></p> <p>Or create a client instance with a custom session:</p> <pre><code>session = requests.Session()\nsession.headers[\"x-key\"] = \"your_api_key\"\nclient = GieClient(api_key=\"your_api_key\", session=session)\n</code></pre> <p>You'll also need to import the APIType you inted to query:</p> <pre><code>from XXXXX.api_models.platform import APIType\n</code></pre>"},{"location":"Quickstart/#methods-overview","title":"Methods Overview","text":"<p>The GieClient class includes various methods to interact with different parts of the GIE API:</p> <pre><code>fetch: Sends a GET request to a specified API endpoint. This serves as a base method and shouldn't be used directly.\nquery_storage: Retrieves storage data with filters such as date, type, country, etc.\nquery_unavailability: Retrieves data on planned or unplanned unavailability.\nquery_eic_listing: Retrieves EIC listing or general API information.\nquery_news_listing: Retrieves general news or a specific news item.\n</code></pre> <p>Examples</p> <p>Here are some examples to get you started with each method: Fetch Data from API</p>"},{"location":"Quickstart/#query-storage-data","title":"Query Storage Data","text":"<pre><code>import datetime\nresponse = client.query_storage(\n    api_type=APIType.AGSI,\n    page=1,\n    size=50,\n    from_date=datetime.date(2023, 1, 1),\n    to_date=datetime.date(2023, 12, 31),\n    country=\"DE\"\n)\n</code></pre>"},{"location":"Quickstart/#query-unavailability-data","title":"Query Unavailability Data","text":"<pre><code>response = client.query_unavailability(\n    api_type=APIType.AGSI,\n    page=1,\n    size=50,\n    from_date=datetime.date(2023, 1, 1),\n    to_date=datetime.date(2023, 12, 31),\n    country=\"DE\",\n    type=\"Planned\"\n)\n</code></pre>"},{"location":"Quickstart/#query-eic-listing","title":"Query EIC Listing","text":"<pre><code>response = client.query_eic_listing(api_type=APIType.AGSI, show_listing=True)\n</code></pre>"},{"location":"Quickstart/#query-news-listing","title":"Query News Listing","text":"<pre><code>response = client.query_news_listing(api_type=APIType.AGSI)\n</code></pre> <p>For detailed parameter information and error handling, refer to the individual client documentation pages.</p>"}]}